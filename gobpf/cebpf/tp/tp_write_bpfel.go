// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package tp

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadTp_write returns the embedded CollectionSpec for tp_write.
func loadTp_write() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Tp_writeBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tp_write: %w", err)
	}

	return spec, err
}

// loadTp_writeObjects loads tp_write and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tp_writeObjects
//	*tp_writePrograms
//	*tp_writeMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTp_writeObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTp_write()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tp_writeSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tp_writeSpecs struct {
	tp_writeProgramSpecs
	tp_writeMapSpecs
}

// tp_writeSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tp_writeProgramSpecs struct {
	HandleTp *ebpf.ProgramSpec `ebpf:"handle_tp"`
}

// tp_writeMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tp_writeMapSpecs struct {
}

// tp_writeObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTp_writeObjects or ebpf.CollectionSpec.LoadAndAssign.
type tp_writeObjects struct {
	tp_writePrograms
	tp_writeMaps
}

func (o *tp_writeObjects) Close() error {
	return _Tp_writeClose(
		&o.tp_writePrograms,
		&o.tp_writeMaps,
	)
}

// tp_writeMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTp_writeObjects or ebpf.CollectionSpec.LoadAndAssign.
type tp_writeMaps struct {
}

func (m *tp_writeMaps) Close() error {
	return _Tp_writeClose()
}

// tp_writePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTp_writeObjects or ebpf.CollectionSpec.LoadAndAssign.
type tp_writePrograms struct {
	HandleTp *ebpf.Program `ebpf:"handle_tp"`
}

func (p *tp_writePrograms) Close() error {
	return _Tp_writeClose(
		p.HandleTp,
	)
}

func _Tp_writeClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tp_write_bpfel.o
var _Tp_writeBytes []byte
