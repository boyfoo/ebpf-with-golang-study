// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package gotools

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadGotool returns the embedded CollectionSpec for gotool.
func loadGotool() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_GotoolBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load gotool: %w", err)
	}

	return spec, err
}

// loadGotoolObjects loads gotool and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*gotoolObjects
//	*gotoolPrograms
//	*gotoolMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadGotoolObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadGotool()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// gotoolSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type gotoolSpecs struct {
	gotoolProgramSpecs
	gotoolMapSpecs
}

// gotoolSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type gotoolProgramSpecs struct {
	UprobeMallocgc *ebpf.ProgramSpec `ebpf:"uprobe_mallocgc"`
}

// gotoolMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type gotoolMapSpecs struct {
	MemMap *ebpf.MapSpec `ebpf:"mem_map"`
}

// gotoolObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadGotoolObjects or ebpf.CollectionSpec.LoadAndAssign.
type gotoolObjects struct {
	gotoolPrograms
	gotoolMaps
}

func (o *gotoolObjects) Close() error {
	return _GotoolClose(
		&o.gotoolPrograms,
		&o.gotoolMaps,
	)
}

// gotoolMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadGotoolObjects or ebpf.CollectionSpec.LoadAndAssign.
type gotoolMaps struct {
	MemMap *ebpf.Map `ebpf:"mem_map"`
}

func (m *gotoolMaps) Close() error {
	return _GotoolClose(
		m.MemMap,
	)
}

// gotoolPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadGotoolObjects or ebpf.CollectionSpec.LoadAndAssign.
type gotoolPrograms struct {
	UprobeMallocgc *ebpf.Program `ebpf:"uprobe_mallocgc"`
}

func (p *gotoolPrograms) Close() error {
	return _GotoolClose(
		p.UprobeMallocgc,
	)
}

func _GotoolClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed gotool_bpfel_x86.o
var _GotoolBytes []byte
